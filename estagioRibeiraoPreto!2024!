//
//  main.swift
//  estagioRibeiraoPreto2024
//
//  Created by Leandro Alexandre on 23/03/2024.
//

import Foundation

//print("Hello, World!")


//1...

var INDICE = 13
var SOMA = 0
var K = 0

while K < INDICE {
    K += 1
    SOMA += K
}

print(SOMA)
//Valor dinal da Soma = 91


//2...
func verificaFibonacci(_ numero: Int) -> Bool {
    // Inicializando os dois primeiros números da sequência
    var a = 0
    var b = 1
    
    // Iterativamente calculando a sequência de Fibonacci até o número exceder ou igual ao número fornecido
    while b < numero {
        let proximo = a + b
        a = b
        b = proximo
    }
    
    // Se o número fornecido for igual a um dos números da sequência, retorna true, caso contrário, retorna false
    return b == numero
}

let numeroInformado = 13
if verificaFibonacci(numeroInformado) {
    print("\(numeroInformado) pertence à sequência de Fibonacci.")
} else {
    print("\(numeroInformado) não pertence à sequência de Fibonacci.")
}
//13 pertence à sequência de Fibonacci.


//3...
//a) 1, 3, 5, 7, ___ 9
//
//b) 2, 4, 8, 16, 32, 64, ____ 128
//
//c) 0, 1, 4, 9, 16, 25, 36, ____ 49
//
//d) 4, 16, 36, 64, ____ 100
//
//e) 1, 1, 2, 3, 5, 8, ____ 13
//
//f) 2,10, 12, 16, 17, 18, 19, ____ 200



//4...
//Ligue um dos interruptores e espere um pouco. Desligue e ligue um segundo interruptor.
//Vá até a sala. A lâmpada desligada e quente corresponde ao primeiro interruptor, a lâmpada acesa ao segundo e a lâmpada apagada e fria ao terceiro.

//5...
func inverterString(_ texto: String) -> String {
    var resultado = ""
    
    // Iterar pelos caracteres da string de trás para frente
    for indice in stride(from: texto.count - 1, through: 0, by: -1) {
        let caractere = texto[texto.index(texto.startIndex, offsetBy: indice)]
        resultado.append(caractere)
    }
    
    return resultado
}

// String original
let minhaString = "Eu sou a escolha correta"
// Inverter a string
let stringInvertida = inverterString(minhaString)
print("String original: \(minhaString)")
print("String invertida: \(stringInvertida)")
